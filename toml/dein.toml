# plugin manager ================================
[[plugins]]
repo = 'Shougo/dein.vim'

# fuzzy finder ==================================
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
build = 'make'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
rev = '0.1.x'
depends = ['plenary.nvim', 'telescope-fzf-native.nvim']
hook_post_source = '''
  exe 'source' expand(g:nvim_home_dir . '/luascripts/telescope.lua')
'''

# color scheme ==================================
[[plugins]]
repo = 'https://github.com/itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'separator': { 'left': '', 'right': '' },
  \ }
'''
[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
colorscheme gruvbox
set termguicolors
let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ }
'''

# tree sitter ===================================
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
hook_install = 'TSUpdate'
hook_post_update = 'TSUpdate'
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/treesitter.lua')
'''
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
on_source = ['nvim-treesitter']
hook_post_source ='lua require"treesitter-context".setup()'

# text object ===================================
[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'rhysd/vim-operator-surround'
[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
" operator mappings
map        <silent>sa             <Plug>(operator-surround-append)
map        <silent>sd             <Plug>(operator-surround-delete)
map        <silent>sr             <Plug>(operator-surround-replace)
omap       ab                     <Plug>(textobj-multiblock-a)
omap       ib                     <Plug>(textobj-multiblock-i)
vmap       ab                     <Plug>(textobj-multiblock-a)
vmap       ib                     <Plug>(textobj-multiblock-i)

" if you use vim-textobj-multiblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'kana/vim-textobj-syntax'
[[plugins]]
repo = 'thinca/vim-textobj-between'
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
[[plugins]]
repo = 'kana/vim-textobj-entire'
hook_add = '''
let g:textobj_entire_no_default_key_mappings = 1
omap av <Plug>(textobj-entire-a)
omap iv <Plug>(textobj-entire-i)
xmap av <Plug>(textobj-entire-a)
xmap iv <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'https://github.com/fuenor/jpmoveword.vim'

# git ===========================================
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
"gitgutter
let g:gitgutter_preview_win_floating = 0
let g:gitgutter_map_keys = 0

nmap <Leader>hs <Plug>(GitGutterStageHunk)
nmap <Leader>hu <Plug>(GitGutterUndoHunk)
nmap <Leader>hp <Plug>(GitGutterPreviewHunk)
nmap ]h         <Plug>(GitGutterNextHunk)
nmap [h         <Plug>(GitGutterPrevHunk)
omap ih         <Plug>(GitGutterTextObjectInnerPending)
omap ah         <Plug>(GitGutterTextObjectOuterPending)
xmap ih         <Plug>(GitGutterTextObjectInnerVisual)
xmap ah         <Plug>(GitGutterTextObjectOuterVisual)

" vim-fugitive
nnoremap <leader>gs <CMD>Git<CR>
nnoremap <leader>ga <CMD>Gwrite<CR>
nnoremap <leader>gc <CMD>Git commit<CR>
nnoremap <leader>gb <CMD>Git blame<CR>
nnoremap <leader>gl <CMD>Gclog<CR>
nnoremap <leader>gp <CMD>Gpush<CR>
nnoremap <leader>gf <CMD>Gfetch<CR>
nnoremap <leader>gd <CMD>Gvdiffsplit<CR>
nnoremap <leader>gr <CMD>Git rebase<CR>
nnoremap <leader>gg <CMD>Glgrep ""<Left>
nnoremap <leader>gm <CMD>Git merge
'''

# indentline ====================================
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
hook_post_source = '''
  exe 'source' expand(g:nvim_home_dir . '/luascripts/indent-blankline.lua')
'''

# translate =====================================
[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
let g:translate_source = "en"
let g:translate_target = "ja"
let g:translate_popup_window = 0
let g:translate_winsize = 10

function! s:swap_translate_language()
  let l:temp = g:translate_target
  let g:translate_target = g:translate_source
  let g:translate_source = l:temp
endfunction

function! s:check_translate_language()
  echo(g:translate_source . "->" . g:translate_target)
endfunction

command! SwapTransrateLang call s:swap_translate_language()
command! CheckTransrateLang call s:check_translate_language()
'''

# other =========================================
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
