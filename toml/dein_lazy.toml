# language server ===============================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['c', 'cpp', 'rust', 'python', 'vim', 'tex', 'javascript', 'typescript', 'css', 'vue']
depends = ['lsp_signature.nvim', 'nvim-cmp']
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/lsp.lua')
LspStart
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

# fuzzy finder ==================================
# filer =========================================
[[plugins]]
repo = 'vim-denops/denops.vim'

# load dein_ddu.toml

# auto complete =================================
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ["denops.vim"]
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/ddc_setting.vim')
'''

# ui
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

# matcher
# souter
# converter
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# source
[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

# Snippet =======================================
[[plugins]]
repo = 'Shougo/neosnippet'
hook_add= '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=0 concealcursor=niv
endif
let g:neosnippet#snippets_directory=expand(g:nvim_home_dir . '/NeoSnips')
'''
on_source = 'ddc.vim'
on_event = 'InsertCharPre'
depends = 'neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# quick run =====================================
[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>(quickrun)'
hook_add = '''
nmap <leader>x <Plug>(quickrun)
nmap <leader><leader>x :QuickRun<Space>
'''
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/quickrun_setting.vim')
'''

# tools =========================================
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap gga :Tabular
xmap ga  <Plug>(EasyAlign)
'''
on_map = '<Plug>(EasyAlign)'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign='left'
let g:NERDCustomDelimiters = {'vim': {'left': '"','right':''}}
let g:NERDCreateDefaultMappings=0
map <Leader>c<space> <plug>NERDCommenterToggle
'''
on_map = '<plug>NERDCommenterToggle'

[[plugins]]
repo='t9md/vim-quickhl.git'
hook_add = '''
nmap <leader>m <Plug>(quickhl-manual-this)
xmap <leader>m <Plug>(quickhl-manual-this)
nmap <leader>M <Plug>(quickhl-manual-reset)
xmap <leader>M <Plug>(quickhl-manual-reset)
'''
on_map = '<Plug>(quickhl-manual-this)'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map <leader>e <Plug>(easymotion-prefix)
'''
on_map = '<Plug>(easymotion-prefix)'

# ctag ==========================================
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_post_source = '''
let g:auto_ctags_set_tags_option=1
'''
[[plugins]]
repo = 'majutsushi/tagbar.git'
depends = ['auto-ctags.vim']
hook_post_source = '''
let g:tagbar_width = 30
let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'     : [
  \   'p:package',
  \   'i:imports:1',
  \   'c:constants',
  \   'v:variables',
  \   't:types',
  \   'n:interfaces',
  \   'w:fields',
  \   'e:embedded',
  \   'm:methods',
  \   'r:constructor',
  \   'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
  \   't' : 'ctype',
  \   'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
  \   'ctype' : 't',
  \   'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : 'gotags',
  \ 'ctagsargs' : '-sort -silent'
  \ }
'''
hook_add = '''
nmap <leader>t <Cmd>TagbarToggle<CR>
'''
on_map = ['<Cmd>TagbarToggle']

# tex ===========================================
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex','cls']
hook_add = '''
nmap <localleader>ll  <plug>(vimtex-compile)
nmap <localleader>lv  <plug>(vimtex-view)
'''

hook_post_source= '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/vimtex.vim')
'''

# html / css / js ===============================
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','htm','md','markdown', 'vue']
hook_source = '''
let g:user_emmet_leader_key=',,'
'''

[[plugins]]
repo='maksimr/vim-jsbeautify'
on_ft=['js', 'html', 'jsx', 'json', 'css']
hook_source = '''
augroup Beautifytype
  "for javascript
  autocmd FileType javascript noremap <buffer> <leader>aj :call JsBeautify()<cr>
  " for json
  autocmd FileType json noremap <buffer> <leader>aj :call JsonBeautify()<cr>
  " for jsx
  autocmd FileType jsx noremap <buffer> <leader>aj :call JsxBeautify()<cr>
  " for html
  autocmd FileType html noremap <buffer> <leader>aj :call HtmlBeautify()<cr>
  " for css or scss
  autocmd FileType css noremap <buffer> <leader>aj :call CSSBeautify()<cr>
augroup END
'''

# markdown ======================================
[[plugins]]
repo = 'plasticboy/vim-markdown.git'
on_ft = ['markdown']
hook_source = '''
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_conceal=0
let g:vim_markdown_conceal_code_blocks=0
let g:vim_markdown_math=1
let g:vim_markdown_new_list_item_indent=0
'''

[[plugins]]
repo = 'dkarter/bullets.vim'
on_ft = ['markdown', 'text', 'gitcommit']
hook_source = '''
let g:bullets_enabled_file_types = [
  \ 'markdown',
  \ 'text',
  \ 'gitcommit',
  \]
let g:bullets_enable_in_empty_buffers = 0
let g:bullets_set_mappings = 0
let g:bullets_custom_mappings = [
  \ ['imap', '<cr>', '<Plug>(bullets-newline)'],
  \ ['inoremap', '<C-cr>', '<cr>'],
  \ ['nmap', 'o', '<Plug>(bullets-newline)'],
  \ ['vmap', '<leader>cn', '<Plug>(bullets-renumber)'],
  \ ['nmap', '<leader>cn', '<Plug>(bullets-renumber)'],
  \ ['nmap', '<leader>cc', '<Plug>(bullets-toggle-checkbox)'],
  \ ['imap', '<C-t>', '<Plug>(bullets-demote)'],
  \ ['nmap', '>', '<Plug>(bullets-demote)'],
  \ ['vmap', '>', '<Plug>(bullets-demote)'],
  \ ['imap', '<C-d>', '<Plug>(bullets-promote)'],
  \ ['nmap', '<', '<Plug>(bullets-promote)'],
  \ ['vmap', '<', '<Plug>(bullets-promote)'],
  \ ]
'''

# spell checker =================================
[[plugins]]
repo = 'kamykn/spelunker.vim'
on_ft = ['markdown', 'latex']

# git ===========================================
[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = ['InsertEnter', 'CmdlineEnter']
[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_add = '''
"gitgutter
let g:gitgutter_preview_win_floating = 0
let g:gitgutter_map_keys = 0

nmap <Leader>hs <Plug>(GitGutterStageHunk)
nmap <Leader>hu <Plug>(GitGutterUndoHunk)
nmap <Leader>hp <Plug>(GitGutterPreviewHunk)
nmap ]h         <Plug>(GitGutterNextHunk)
nmap [h         <Plug>(GitGutterPrevHunk)
omap ih         <Plug>(GitGutterTextObjectInnerPending)
omap ah         <Plug>(GitGutterTextObjectOuterPending)
xmap ih         <Plug>(GitGutterTextObjectInnerVisual)
xmap ah         <Plug>(GitGutterTextObjectOuterVisual)

" vim-fugitive
nnoremap <leader>gs <CMD>Git<CR>
nnoremap <leader>ga <CMD>Gwrite<CR>
nnoremap <leader>gc <CMD>Git commit<CR>
nnoremap <leader>gb <CMD>Git blame<CR>
nnoremap <leader>gl <CMD>Gclog<CR>
nnoremap <leader>gp <CMD>Gpush<CR>
nnoremap <leader>gf <CMD>Gfetch<CR>
nnoremap <leader>gd <CMD>Gvdiffsplit<CR>
nnoremap <leader>gr <CMD>Git rebase<CR>
nnoremap <leader>gg <CMD>Glgrep ""<Left>
nnoremap <leader>gm <CMD>Git merge
'''

# translate =====================================
[[plugins]]
repo = 'skanehira/translate.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
on_map = ['<Plug>(VTranslate)']
hook_add = '''
let g:translate_source = 'en'
let g:translate_target = 'ja'
let g:translate_popup_window = 0
let g:translate_winsize = 10

function! s:swap_translate_language()
  let l:temp = g:translate_target
  let g:translate_target = g:translate_source
  let g:translate_source = l:temp
endfunction

function! s:check_translate_language()
  echo(g:translate_source . '>' . g:translate_target)
endfunction

command! SwapTransrateLang call s:swap_translate_language()
command! CheckTransrateLang call s:check_translate_language()

vnoremap <leader>x <Plug>(VTranslate)
'''

# tree sitter ===================================
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'
on_event = ['BufRead', 'CursorHold']
hook_install = 'TSUpdate'
hook_post_update = 'TSUpdate'
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/treesitter.lua')
'''
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
on_source = ['nvim-treesitter']
hook_post_source ='lua require"treesitter-context".setup()'

# indentline ====================================
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = ['BufRead', 'CursorHold']
depends = ['nvim-treesitter']
hook_post_source = '''
  exe 'source' expand(g:nvim_home_dir . '/luascripts/indent-blankline.lua')
'''

# text object ===================================
[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'kana/vim-textobj-user'


[[plugins]]
repo = 'kana/vim-textobj-syntax'
depends = ['vim-textobj-user']
on_map = '<Plug>(textobj-syntax'
hook_add = '''
omap  ay  <Plug>(textobj-syntax-a)
omap  iy  <Plug>(textobj-syntax-i)
vmap  ay  <Plug>(textobj-syntax-a)
vmap  iy  <Plug>(textobj-syntax-i)
'''

[[plugins]]
repo = 'thinca/vim-textobj-between'
depends = ['vim-textobj-user']
on_map = '<Plug>(textobj-between'
hook_add = '''
let g:textobj_between_no_default_key_mappings = 1
omap  af  <Plug>(textobj-between-a)
omap  if  <Plug>(textobj-between-i)
vmap  af  <Plug>(textobj-between-a)
vmap  if  <Plug>(textobj-between-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
on_map = '<Plug>(textobj-multiblock'
depends = ['vim-textobj-user']
hook_add = '''
omap  ab  <Plug>(textobj-multiblock-a)
omap  ib  <Plug>(textobj-multiblock-i)
vmap  ab  <Plug>(textobj-multiblock-a)
vmap  ib  <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
on_map = '<Plug>(textobj-entire'
depends = ['vim-textobj-user']
hook_add = '''
let g:textobj_entire_no_default_key_mappings = 1
omap  av  <Plug>(textobj-entire-a)
omap  iv  <Plug>(textobj-entire-i)
xmap  av  <Plug>(textobj-entire-a)
xmap  iv  <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user', 'vim-textobj-multiblock']
on_map = '<Plug>(operator-surround'
hook_add = '''
" operator mappings
vmap  <silent>sa  <Plug>(operator-surround-append)
vmap  <silent>sd  <Plug>(operator-surround-delete)
vmap  <silent>sr  <Plug>(operator-surround-replace)

" if you use vim-textobj-multiblock
nmap  <silent>sdd   <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap  <silent>srr   <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'https://github.com/fuenor/jpmoveword.vim'
on_event = ['BufRead', 'CursorHold']

# others ========================================
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_post_source = '''
let g:memolist_path='$MEMO_DIR'
let g:memolist_memo_date = '%Y%m%d-%H%M'
let g:memolist_vimfiler_option = '-split -winwidth=50 -simple'
let g:memolist_memo_suffix = 'md'
let g:memolist_filename_date = '%y%m%d_'
let g:memolist_delimiter_yaml_start = '---'
let g:memolist_delimiter_yaml_end  = '---'

let g:memolist_memo_suffix = 'md'
let g:memolist_template_dir_path = g:nvim_home_dir . '/template'
'''
hook_add = '''
map <Leader><Leader>mn  <Cmd>MemoNew<CR>
map <Leader><Leader>ml  <Cmd>MemoList<CR>
map <Leader><Leader>mg  <Cmd>MemoGrep<CR>
'''
on_map = ['<Cmd>MemoNew', '<Cmd>MemoList', '<Cmd>MemoGrep']

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
nmap <space>b <Plug>(openbrowser-smart-search)
vmap <space>b <Plug>(openbrowser-smart-search)
'''
on_map = ['<Plug>(openbrowser-smart-search)', '<Plug>(openbrowser-smart-search)']
