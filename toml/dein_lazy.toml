# language server ===============================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['c', 'cpp', 'rust', 'python', 'vim', 'tex', 'javascript', 'typescript', 'css', 'vue']
depends = ['lsp_signature.nvim', 'nvim-cmp']
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/lsp.lua')
LspStart
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

# auto complete =================================
[[plugins]]
repo = 'hrsh7th/cmp-omni'
[[plugins]]
repo = 'octaltree/cmp-look'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
[[plugins]]
repo = 'hrsh7th/cmp-path'
[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
[[plugins]]
repo = 'uga-rosa/cmp-dictionary'
[[plugins]]
repo = 'saadparwaiz1/cmp_luasnip'
depends = 'LuaSnip'
[[plugins]]
repo = 'onsails/lspkind.nvim'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
depends = ['nvim-lspconfig', 'cmp-nvim-lsp', 'cmp-buffer', 'cmp-path', 'cmp-cmdline', 'cmp_luasnip', 'lspkind.nvim', 'cmp-look', 'cmp-omni', 'cmp-dictionary']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/nvim-cmp.lua')
'''

# filer =========================================
[[plugins]]
repo =  'kyazdani42/nvim-tree.lua'
hook_add = '''
nmap <silent> <leader>d   :<C-u>exe 'lcd' expand('%:p:h')<CR><Cmd>NvimTreeToggle<CR>
nmap <silent> st          :<C-u>tab sp<CR><leader>d
nmap <silent> <leader>n   <Cmd>NvimTreeFocus<CR>
'''
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/nvim-tree.lua')
'''
on_map = ['<Cmd>NvimTreeToggle', '<Cmd>NvimTreeFocus']

# Snippet =======================================
[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'L3MON4D3/LuaSnip'
hook_add = '''
" For changing choices in choiceNodes (not strictly necessary for a basic setup).
imap <silent><expr> <C-e> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-e>'
smap <silent><expr> <C-e> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-e>'
'''
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/luasnip.lua')
'''
depends = ['vim-snippets']

# quick run =====================================
[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>(quickrun)'
hook_add = '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/quickrun_setting.vim')
'''

# tools =========================================
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap gga :Tabular
xmap ga  <Plug>(EasyAlign)
'''
on_map = '<Plug>(EasyAlign)'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign='left'
let g:NERDCustomDelimiters = {'vim': {'left': '"','right':''}}
let g:NERDCreateDefaultMappings=0
map <Leader>c<space> <plug>NERDCommenterToggle
'''
on_map = '<plug>NERDCommenterToggle'

[[plugins]]
repo='t9md/vim-quickhl.git'
hook_add = '''
nmap <leader>m <Plug>(quickhl-manual-this)
xmap <leader>m <Plug>(quickhl-manual-this)
nmap <leader>M <Plug>(quickhl-manual-reset)
xmap <leader>M <Plug>(quickhl-manual-reset)
'''
on_map = '<Plug>(quickhl-manual-this)'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map <leader>e <Plug>(easymotion-prefix)
'''
on_map = '<Plug>(easymotion-prefix)'

# ctag ==========================================
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_post_source = '''
let g:auto_ctags_set_tags_option=1
'''
[[plugins]]
repo = 'majutsushi/tagbar.git'
depends = ["auto-ctags.vim"]
hook_post_source = '''
let g:tagbar_width = 30
let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'     : [
  \   'p:package',
  \   'i:imports:1',
  \   'c:constants',
  \   'v:variables',
  \   't:types',
  \   'n:interfaces',
  \   'w:fields',
  \   'e:embedded',
  \   'm:methods',
  \   'r:constructor',
  \   'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
  \   't' : 'ctype',
  \   'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
  \   'ctype' : 't',
  \   'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : 'gotags',
  \ 'ctagsargs' : '-sort -silent'
  \ }
'''
hook_add = '''
nmap <leader>t <Cmd>TagbarToggle<CR>
'''
on_map = ['<Cmd>TagbarToggle']

# tex ===========================================
[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex','cls']
hook_add = '''
nmap <localleader>ll  <plug>(vimtex-compile)
nmap <localleader>lv  <plug>(vimtex-view)
'''

hook_post_source= '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/vimtex.vim')
'''

# html / css / js ===============================
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','htm','md','markdown', 'vue']
hook_source = '''
let g:user_emmet_leader_key=',,'
'''

[[plugins]]
repo='maksimr/vim-jsbeautify'
on_ft=['js', 'html', 'jsx', 'json', 'css']
hook_source = '''
augroup Beautifytype
  "for javascript
  autocmd FileType javascript noremap <buffer> <leader>aj :call JsBeautify()<cr>
  " for json
  autocmd FileType json noremap <buffer> <leader>aj :call JsonBeautify()<cr>
  " for jsx
  autocmd FileType jsx noremap <buffer> <leader>aj :call JsxBeautify()<cr>
  " for html
  autocmd FileType html noremap <buffer> <leader>aj :call HtmlBeautify()<cr>
  " for css or scss
  autocmd FileType css noremap <buffer> <leader>aj :call CSSBeautify()<cr>
augroup END
'''

# markdown ======================================
[[plugins]]
repo = 'plasticboy/vim-markdown.git'
on_ft = ['markdown']
hook_source = '''
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_conceal=0
let g:vim_markdown_conceal_code_blocks=0
let g:vim_markdown_math=1
let g:vim_markdown_new_list_item_indent=0
'''

[[plugins]]
repo = 'dkarter/bullets.vim'
on_ft = ['markdown', 'text', 'gitcommit']
hook_source = '''
let g:bullets_enabled_file_types = [
  \ 'markdown',
  \ 'text',
  \ 'gitcommit',
  \]
let g:bullets_enable_in_empty_buffers = 0
let g:bullets_set_mappings = 0
let g:bullets_custom_mappings = [
  \ ['imap', '<cr>', '<Plug>(bullets-newline)'],
  \ ['inoremap', '<C-cr>', '<cr>'],
  \ ['nmap', 'o', '<Plug>(bullets-newline)'],
  \ ['vmap', '<leader>cn', '<Plug>(bullets-renumber)'],
  \ ['nmap', '<leader>cn', '<Plug>(bullets-renumber)'],
  \ ['nmap', '<leader>cc', '<Plug>(bullets-toggle-checkbox)'],
  \ ['imap', '<C-t>', '<Plug>(bullets-demote)'],
  \ ['nmap', '>', '<Plug>(bullets-demote)'],
  \ ['vmap', '>', '<Plug>(bullets-demote)'],
  \ ['imap', '<C-d>', '<Plug>(bullets-promote)'],
  \ ['nmap', '<', '<Plug>(bullets-promote)'],
  \ ['vmap', '<', '<Plug>(bullets-promote)'],
  \ ]
'''

# writing tools =================================
[[plugins]]
repo = "rhysd/vim-grammarous"
on_ft = ["markdown", "txt"]
hook_source = '''
let g:grammarous#enable_spell_check=1
'''

[[plugins]]
repo = "kamykn/spelunker.vim"
on_ft = ["markdown", "latex"]

# others ========================================
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_post_source = '''
let g:memolist_path="$MEMO_DIR"
let g:memolist_memo_date = "%Y%m%d-%H%M"
let g:memolist_vimfiler_option = "-split -winwidth=50 -simple"
let g:memolist_memo_suffix = "md"
let g:memolist_filename_date = "%y%m%d_"
let g:memolist_delimiter_yaml_start = "---"
let g:memolist_delimiter_yaml_end  = "---"

let g:memolist_memo_suffix = "md"
let g:memolist_template_dir_path = g:nvim_home_dir . "/template"
'''
hook_add = '''
map <Leader><Leader>mn  <Cmd>MemoNew<CR>
map <Leader><Leader>ml  <Cmd>MemoList<CR>
map <Leader><Leader>mg  <Cmd>MemoGrep<CR>
'''
on_map = ["<Cmd>MemoNew", "<Cmd>MemoList", "<Cmd>MemoGrep"]

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
nmap <space>b <Plug>(openbrowser-smart-search)
vmap <space>b <Plug>(openbrowser-smart-search)
'''
on_map = ["<Plug>(openbrowser-smart-search)", "<Plug>(openbrowser-smart-search)"]
