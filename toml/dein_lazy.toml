# language server ===============================
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['c', 'cpp', 'rust', 'python', 'vim', 'tex', 'javascript', 'typescript', 'css', 'vue']
depends = 'lsp_signature.nvim'
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/lsp.vim')
LspStart
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'

# fuzzy finder ==================================
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
build = 'make'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
rev = '0.1.0'
depends = ['plenary.nvim', 'telescope-fzf-native.nvim']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_post_source = '''
  exe 'source' expand(g:nvim_home_dir . '/luascripts/telescope.lua')
'''

# auto complete =================================
[[plugins]]
repo = 'octaltree/cmp-look'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
[[plugins]]
repo = 'hrsh7th/cmp-path'
[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
[[plugins]]
repo = 'saadparwaiz1/cmp_luasnip'
depends = 'LuaSnip'
[[plugins]]
repo = 'onsails/lspkind.nvim'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
depends = ['nvim-lspconfig', 'cmp-nvim-lsp', 'cmp-buffer', 'cmp-path', 'cmp-cmdline', 'cmp_luasnip', 'lspkind.nvim', 'cmp-look']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/nvim-cmp.lua')
'''

# filer =========================================
[[plugins]]
repo =  'kyazdani42/nvim-tree.lua'
hook_add = '''
nmap <silent> <leader>d   :<C-u>exe 'lcd' expand('%:p:h')<CR><Cmd>NvimTreeToggle<CR>
nmap <silent> <leader>st  :<C-u>tab sp<CR><leader>d
nmap <silent> <leader>n   <Cmd>NvimTreeFocus<CR>
'''
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/nvim-tree.lua')
'''
on_map = ['<Cmd>NvimTreeToggle', '<Cmd>NvimTreeFocus']

# Snippet =======================================
[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'L3MON4D3/LuaSnip'
hook_add = '''
" press <Tab> to expand or jump in a snippet. These can also be mapped separately
" via <Plug>luasnip-expand-snippet and <Plug>luasnip-jump-next.
imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 
" -1 for jumping backwards.
inoremap <silent> <S-Tab> <cmd>lua require'luasnip'.jump(-1)<Cr>
snoremap <silent> <Tab> <cmd>lua require('luasnip').jump(1)<Cr>
snoremap <silent> <S-Tab> <cmd>lua require('luasnip').jump(-1)<Cr>
" For changing choices in choiceNodes (not strictly necessary for a basic setup).
imap <silent><expr> <C-e> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-e>'
smap <silent><expr> <C-e> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : '<C-e>'
'''
hook_post_source = '''
exe 'source' expand(g:nvim_home_dir . '/luascripts/luasnip.lua')
'''
depends = ['vim-snippets']

# quick run =====================================
[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>(quickrun)'
hook_add = '''
exe 'source' expand(g:nvim_home_dir . '/vimscripts/quickrun_setting.vim')
'''


# tools =========================================
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap gga :Tabular
xmap ga  <Plug>(EasyAlign)
'''
on_map = '<Plug>(EasyAlign)'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims=1
let g:NERDDefaultAlign='left'
let g:NERDCustomDelimiters = {'vim': {'left': '"','right':''}}
let g:NERDCreateDefaultMappings=0
map <Leader>c<space> <plug>NERDCommenterToggle
'''
on_map = '<plug>NERDCommenterToggle'

[[plugins]]
repo='t9md/vim-quickhl.git'
hook_add = '''
nmap <leader>m <Plug>(quickhl-manual-this)
xmap <leader>m <Plug>(quickhl-manual-this)
nmap <leader>M <Plug>(quickhl-manual-reset)
xmap <leader>M <Plug>(quickhl-manual-reset)
'''
on_map = '<Plug>(quickhl-manual-this)'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map <leader>e <Plug>(easymotion-prefix)
'''
on_map = '<Plug>(easymotion-prefix)'

# tex ===========================================
[[plugins]]
repo = 'lervag/vimtex'
# rev = 'v2.6'
on_ft = ['tex','cls']
hook_source= '''
let g:vimtex_syntax_conceal_disable=1
let g:vimtex_mappings_enabled=0
let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : '',
    \ 'callback' : 1,
    \ 'continuous' : 1,
    \ 'executable' : 'latexmk',
    \}

nmap <localleader>ll  <plug>(vimtex-compile)
nmap <localleader>lt  <plug>(vimtex-toc-toggle)
nmap <localleader>ls  <plug>(vimtex-status-all)

let g:vimtex_quickfix_ignore_filters = [
      \ 'Font Warning',
      \ 'Underfull',
      \]

if g:OSTYPE == "Darwin"
  let g:vimtex_view_method = 'skim'
elseif g:OSTYPE == "Linux"
  let g:vimtex_view_general_viewer = 'evince'
endif
'''

# html / css / js ===============================
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','htm','md','markdown', 'vue']
hook_source = '''
let g:user_emmet_leader_key=',,'
'''

[[plugins]]
repo='maksimr/vim-jsbeautify'
on_ft=['js', 'html', 'jsx', 'json', 'css']
hook_source = '''
augroup Beautifytype
  "for javascript
  autocmd FileType javascript noremap <buffer> <leader>aj :call JsBeautify()<cr>
  " for json
  autocmd FileType json noremap <buffer> <leader>aj :call JsonBeautify()<cr>
  " for jsx
  autocmd FileType jsx noremap <buffer> <leader>aj :call JsxBeautify()<cr>
  " for html
  autocmd FileType html noremap <buffer> <leader>aj :call HtmlBeautify()<cr>
  " for css or scss
  autocmd FileType css noremap <buffer> <leader>aj :call CSSBeautify()<cr>
augroup END
'''

# markdown ======================================
[[plugins]]
repo = 'plasticboy/vim-markdown.git'
on_ft = ['markdown']
hook_source = '''
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_new_list_item_indent=0
let g:vim_markdown_conceal=0
let g:vim_markdown_conceal_code_blocks=0
let g:vim_markdown_math=1
let g:vim_markdown_auto_insert_bullets=1
'''

# writing tools =================================
[[plugins]]
repo = 'https://github.com/dense-analysis/ale'
on_ft=['markdown']
hook_source = '''
" let g:ale_sign_column_always=1
" let g:ale_lint_on_save=1
" let g:ale_lint_on_text_changed=1
" let g:ale_lint_on_enter=0
" let g:ale_open_list=0
let g:ale_completion_enabled=1

nnoremap <leader>af :ALEFix<CR>
nnoremap <leader>al :ALELint<CR>
nnoremap ]a :ALENext<CR>
nnoremap [a :ALEPrevious<CR>

let g:ale_linters={}
let g:ale_linters={
  \ 'markdown' : ['textlint'],
  \}
let g:ale_fixers = {
  \ 'markdown' : ['textlint'],
  \}
'''

[[plugins]]
repo = "rhysd/vim-grammarous"
on_ft = ["markdown", "txt"]
hook_source = '''
let g:grammarous#enable_spell_check=1
'''

[[plugins]]
repo = "kamykn/spelunker.vim"
on_ft = ["markdown", "latex"]
